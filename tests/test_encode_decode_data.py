# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
#
# Copyright (C) 2014 Regents of the University of California.
# Author: Jeff Thompson <jefft0@remap.ucla.edu>
# See COPYING for copyright and distribution information.
#

from pyndn import Data
from pyndn import ContentType
from pyndn import KeyLocatorType
from pyndn import Sha256WithRsaSignature
from pyndn.util import Blob

TlvData = Blob(bytearray([
0x02, 0xC8, # NDN Data
  0x03, 0x0A, 0x04, 0x03, 0x6E, 0x64, 0x6E, 0x04, 0x03, 0x61, 0x62, 0x63, # Name
  0x10, 0x04, # MetaInfo
    0x15, 0x02, 0x13, 0x88, # FreshnessPeriod
  0x11, 0x08, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x21, # Content
  0x12, 0x28, # SignatureInfo
    0x16, 0x01, 0x01, # SignatureType
    0x17, 0x23, # KeyLocator
      0x03, 0x21, # Name
        0x04, 0x08, 0x74, 0x65, 0x73, 0x74, 0x6E, 0x61, 0x6D, 0x65,
        0x04, 0x03, 0x4B, 0x45, 0x59,
        0x04, 0x07, 0x44, 0x53, 0x4B, 0x2D, 0x31, 0x32, 0x33,
        0x04, 0x07, 0x49, 0x44, 0x2D, 0x43, 0x45, 0x52, 0x54,
  0x13, 0x80, # SignatureValue
    0x39, 0xE2, 0x42, 0x62, 0x53, 0x85, 0x29, 0x4D, 0xE4, 0x42, 0xA4, 0x41, 0xD2, 0x70, 0xF0, 0xE7,
    0xC9, 0x3F, 0x8D, 0xC5, 0x6C, 0x4E, 0x51, 0xC6, 0x39, 0x09, 0x6F, 0xA8, 0x4C, 0x78, 0xD6, 0xC6,
    0x35, 0x8D, 0xFA, 0x70, 0x50, 0x75, 0xF4, 0xCC, 0x70, 0x75, 0x85, 0x8E, 0x2E, 0x34, 0xFA, 0xD2,
    0x8F, 0xA3, 0x19, 0x0E, 0xFA, 0xCF, 0x23, 0x92, 0x80, 0x62, 0x6F, 0xA5, 0x5C, 0xA7, 0x38, 0x44,
    0xC5, 0xC4, 0x74, 0x59, 0x8D, 0xE6, 0x9F, 0xAE, 0x17, 0x94, 0x89, 0xA9, 0x9E, 0xE5, 0x4E, 0x5D,
    0x21, 0x85, 0x12, 0x1C, 0x9E, 0xA6, 0x74, 0x97, 0xB8, 0x6B, 0xB8, 0xB3, 0x77, 0x2B, 0x49, 0xF8,
    0xA5, 0xF9, 0xF7, 0x28, 0x4A, 0x19, 0xE2, 0x98, 0x60, 0xCC, 0xB3, 0x5C, 0x75, 0x25, 0xAF, 0x8E,
    0x70, 0x36, 0x6F, 0x63, 0x20, 0xCE, 0x39, 0x4A, 0xF7, 0x3F, 0xC5, 0x28, 0x34, 0xC7, 0x48, 0xF3,
1
  ]))

def dump(*list):
    result = ""
    for element in list:
        result += (element if type(element) is str else repr(element)) + " "
    print(result)

def dumpData(data):
    dump("name:", data.getName().toUri())
    if data.getContent().size() > 0:
        dump("content (raw):", bytearray(data.getContent().buf()).decode('latin-1'))
        dump("content (hex):", data.getContent().toHex())
    else:
        dump("content: <empty>")
    if not data.getMetaInfo().getType() == ContentType.BLOB:
        dump("metaInfo.type:",
             "LINK" if data.getMetaInfo().getType() == ContentType.LINK
             else "KEY" if data.getMetaInfo().getType() == ContentType.KEY
             else "uknown")
    dump("metaInfo.freshnessPeriod (milliseconds):",
         data.getMetaInfo().getFreshnessPeriod()
         if data.getMetaInfo().getFreshnessPeriod() >= 0 else "<none>")
    signature = data.getSignature()
    if type(signature) is Sha256WithRsaSignature:
        dump("signature.signature:", 
             "<none>" if signature.getSignature().size() == 0
                      else signature.getSignature().toHex())
        if signature.getKeyLocator().getType() != None:
            if (signature.getKeyLocator().getType() == 
                KeyLocatorType.KEY_LOCATOR_DIGEST):
                dump("signature.keyLocator: KeyLocatorDigest:",
                     signature.getKeyLocator().getKeyData().toHex())
            elif signature.getKeyLocator().getType() == KeyLocatorType.KEYNAME:
                dump("signature.keyLocator: KeyName:",
                     signature.getKeyLocator().getKeyName().toUri())
            else:
                dump("signature.keyLocator: <unrecognized KeyLocatorType")
        else:
            dump("signature.keyLocator: <none>")

def main():
    data = Data()
    data.wireDecode(TlvData)
    dump("Decoded Data:")
    dumpData(data)
    
    encoding = data.wireEncode()
    
    reDecodedData = Data()
    reDecodedData.wireDecode(encoding)
    dump("")
    dump("Re-decoded Data:")
    dumpData(reDecodedData)

main()
